<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1" />
    <title>Graph Visualization - Sticky Notes</title>
    <!-- Tailwind CSS CDN -->
    <script src="https://cdn.tailwindcss.com"></script>
    <!-- D3.js CDN -->
    <script src="https://d3js.org/d3.v7.min.js"></script>
    <style>
      /* Styling for links */
      .link {
        stroke: #9ca3af;
        stroke-width: 1.5px;
      }
      /* Sticky note styling â€“ note fill is applied via inline styles */
      .sticky-note {
        stroke: #eab308;
        stroke-width: 1.5px;
        rx: 5;
        ry: 5;
      }
      /* Label styling */
      .note-label {
        pointer-events: none;
        font-size: 12px;
        text-anchor: middle;
        dominant-baseline: central;
      }
    </style>
  </head>
  <body class="bg-gray-100">
    <!-- Two columns container -->
    <div class="max-w-7xl mx-auto flex h-screen">
      <!-- Left Column: Controls -->
      <div class="w-1/3 p-4 border-r overflow-y-auto space-y-6">
        <h1 class="text-2xl font-bold mb-4">Sticky Note Controls</h1>
        <!-- Notes Textarea Input -->
        <div>
          <label for="Notes">
            <span class="text-sm font-medium text-gray-700">Notes</span>
            <div class="relative mt-0.5 overflow-hidden rounded border border-gray-300 shadow-sm focus-within:ring focus-within:ring-blue-600">
              <textarea
                id="Notes"
                class="w-full resize-none border-none focus:ring-0 sm:text-sm"
                rows="4"
                placeholder="Enter one note per line"
              ></textarea>
              <div class="flex items-center justify-end gap-2 p-1.5">
                <button
                  id="clearNotes"
                  type="button"
                  class="rounded border border-transparent px-3 py-1.5 text-sm font-medium text-gray-700 transition-colors hover:text-gray-900"
                >
                  Clear
                </button>
                <button
                  id="saveNotes"
                  type="button"
                  class="rounded border border-gray-300 px-3 py-1.5 text-sm font-medium text-gray-900 shadow-sm transition-colors hover:bg-gray-100"
                >
                  Save
                </button>
              </div>
            </div>
          </label>
        </div>

        <!-- Connect Nodes Form -->
        <form id="linkForm" class="mb-6">
          <label class="block mb-1 font-medium">Connect to Note:</label>
          <div class="flex items-center justify-end gap-2 p-1.5 border border-gray-300 rounded">
            <select id="targetSelect" class="border p-1 flex-1"></select>
            <button type="submit" class="bg-green-500 text-white px-4 py-1 rounded">
              Add Connection
            </button>
          </div>
        </form>
  
        <!-- Delete Node Form -->
        <form id="deleteForm" class="mb-6">
          <label class="block mb-1 font-medium">Delete Node:</label>
          <div class="flex items-center justify-end gap-2 p-1.5 border border-gray-300 rounded">
            <select id="deleteSelect" class="border p-1 flex-1"></select>
            <button type="submit" class="bg-red-500 text-white px-4 py-1 rounded">
              Delete Node
            </button>
          </div>
        </form>
  
        <!-- Live Search Input -->
        <div id="searchForm" class="mb-6">
          <label for="queryInput" class="block mb-1 font-medium">Search Nodes:</label>
          <input
            id="queryInput"
            type="text"
            placeholder="Type to search..."
            class="border p-1 w-full"
          />
        </div>
      </div>
  
      <!-- Right Column: Graph Visualization -->
      <div id="graphContainer" class="w-2/3 relative">
        <!-- D3 will append the SVG element here -->
      </div>
    </div>
  
    <script>
      // Get dimensions from the graph container
      const container = document.getElementById("graphContainer");
      const width = container.clientWidth;
      const height = container.clientHeight;
  
      // Create the SVG element for the graph
      const svg = d3.select("#graphContainer")
        .append("svg")
        .attr("width", width)
        .attr("height", height);
  
      // Sticky note dimensions
      const noteWidth = 100;
      const noteHeight = 60;
  
      // Initial sample graph data
      const graph = {
        nodes: [
          { id: "Node 1" },
          { id: "Node 2" },
          { id: "Node 3" },
          { id: "Node 4" },
          { id: "Node 5" }
        ],
        links: [
          { source: "Node 1", target: "Node 2" },
          { source: "Node 1", target: "Node 3" },
          { source: "Node 2", target: "Node 4" },
          { source: "Node 3", target: "Node 5" },
          { source: "Node 4", target: "Node 5" }
        ]
      };
  
      // Initialize the D3 force simulation
      const simulation = d3.forceSimulation(graph.nodes)
        .force("link", d3.forceLink(graph.links)
          .id(d => d.id)
          .distance(150)
        )
        .force("charge", d3.forceManyBody().strength(-200))
        .force("center", d3.forceCenter(width / 2, height / 2));
  
      // Append container groups for links, notes, and labels
      svg.append("g").attr("class", "links");
      svg.append("g").attr("class", "notes");
      svg.append("g").attr("class", "labels");
  
      // Update target options for connection dropdown
      function updateTargetOptions() {
        const targetSelect = document.getElementById("targetSelect");
        targetSelect.innerHTML = "";
        if (graph.nodes.length < 2) {
          targetSelect.disabled = true;
          return;
        }
        targetSelect.disabled = false;
        const sourceNode = graph.nodes[graph.nodes.length - 1];
        graph.nodes.forEach(node => {
          if (node.id !== sourceNode.id) {
            const option = document.createElement("option");
            option.value = node.id;
            option.text = node.id;
            targetSelect.appendChild(option);
          }
        });
      }
  
      // Update delete dropdown options
      function updateDeleteOptions() {
        const deleteSelect = document.getElementById("deleteSelect");
        deleteSelect.innerHTML = "";
        if (!graph.nodes.length) {
          deleteSelect.disabled = true;
          return;
        }
        deleteSelect.disabled = false;
        graph.nodes.forEach(node => {
          const option = document.createElement("option");
          option.value = node.id;
          option.text = node.id;
          deleteSelect.appendChild(option);
        });
      }
  
      // Render/update the graph based on current data
      function updateGraph() {
        // Update links using the enter-update-exit pattern
        const link = svg.select("g.links")
          .selectAll("line")
          .data(
            graph.links,
            d => (d.source.id ? d.source.id : d.source) + "-" + (d.target.id ? d.target.id : d.target)
          );
        link.exit().remove();
        link.enter()
          .append("line")
          .attr("class", "link");
  
        // Render nodes as sticky notes (rectangles)
        const notes = svg.select("g.notes")
          .selectAll("rect")
          .data(graph.nodes, d => d.id);
        notes.exit().remove();
        const notesEnter = notes.enter()
          .append("rect")
          .attr("class", "sticky-note")
          .attr("width", noteWidth)
          .attr("height", noteHeight)
          .call(
            d3.drag()
              .on("start", dragStarted)
              .on("drag", dragged)
              .on("end", dragEnded)
          );
        notesEnter.merge(notes);
  
        // Render labels for nodes and center them accordingly
        const labels = svg.select("g.labels")
          .selectAll("text")
          .data(graph.nodes, d => d.id);
        labels.exit().remove();
        labels.enter()
          .append("text")
          .attr("class", "note-label")
          .merge(labels)
          .text(d => d.id);
  
        // Restart simulation with updated nodes and links
        simulation.nodes(graph.nodes);
        simulation.force("link").links(graph.links);
        simulation.alpha(0.3).restart();
  
        updateTargetOptions();
        updateDeleteOptions();
        highlightSearch(); // Update search highlighting if applicable
      }
  
      // Update positions on each simulation tick
      simulation.on("tick", () => {
        svg.selectAll("g.links line")
          .attr("x1", d => d.source.x)
          .attr("y1", d => d.source.y)
          .attr("x2", d => d.target.x)
          .attr("y2", d => d.target.y);
  
        svg.selectAll("g.notes rect")
          .attr("x", d => d.x - noteWidth / 2)
          .attr("y", d => d.y - noteHeight / 2);
  
        svg.selectAll("g.labels text")
          .attr("x", d => d.x)
          .attr("y", d => d.y);
      });
  
      // Drag event callbacks
      function dragStarted(event, d) {
        if (!event.active) simulation.alphaTarget(0.3).restart();
        d.fx = d.x;
        d.fy = d.y;
      }
      function dragged(event, d) {
        d.fx = event.x;
        d.fy = event.y;
      }
      function dragEnded(event, d) {
        if (!event.active) simulation.alphaTarget(0);
        d.fx = null;
        d.fy = null;
      }
  
      // Save notes from the textarea (one note per line)
      document.getElementById("saveNotes").addEventListener("click", () => {
        const textArea = document.getElementById("Notes");
        // Split text by newline, trim, and filter out empty lines
        const notes = textArea.value.split("\n").map(line => line.trim()).filter(line => line);
        notes.forEach(noteText => {
          if (!graph.nodes.find(n => n.id === noteText)) {
            graph.nodes.push({ id: noteText });
          }
        });
        updateGraph();
      });
  
      // Clear the textarea when Clear is clicked
      document.getElementById("clearNotes").addEventListener("click", () => {
        document.getElementById("Notes").value = "";
      });
  
      // Connect the most recent node (source) to a selected target node
      document.getElementById("linkForm").addEventListener("submit", function(event) {
        event.preventDefault();
        if (graph.nodes.length < 2) return;
        const targetSelect = document.getElementById("targetSelect");
        const targetText = targetSelect.value.trim();
        const sourceNode = graph.nodes[graph.nodes.length - 1];
        if (!targetText) return;
        const exists = graph.links.find(
          l => (l.source.id ? l.source.id : l.source) === sourceNode.id &&
               (l.target.id ? l.target.id : l.target) === targetText
        );
        if (!exists) {
          graph.links.push({ source: sourceNode.id, target: targetText });
          updateGraph();
        }
      });
  
      // Delete a node and its linked connections
      document.getElementById("deleteForm").addEventListener("submit", function(event) {
        event.preventDefault();
        const deleteSelect = document.getElementById("deleteSelect");
        const nodeId = deleteSelect.value.trim();
        if (!nodeId) return;
        graph.nodes = graph.nodes.filter(n => n.id !== nodeId);
        graph.links = graph.links.filter(l => {
          const source = l.source.id ? l.source.id : l.source;
          const target = l.target.id ? l.target.id : l.target;
          return source !== nodeId && target !== nodeId;
        });
        updateGraph();
      });
  
      // Live search: Change the fill color for matching nodes
      function highlightSearch() {
        const query = document.getElementById("queryInput").value.trim().toLowerCase();
        svg.selectAll("g.notes rect")
          .style("fill", d =>
            query && d.id.toLowerCase().includes(query)
              ? "#93c5fd"  // Highlight color
              : "#fcd34d"   // Default sticky note color
          );
      }
  
      // Listen for input in the search field
      document.getElementById("queryInput").addEventListener("input", highlightSearch);
  
      // Initial graph rendering
      updateGraph();
    </script>
  </body>
</html>
